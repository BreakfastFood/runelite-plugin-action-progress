package com.github.calebwhiting.runelite.plugins.actionprogress;

import com.github.calebwhiting.runelite.plugins.actionprogress.data.Cooking;
import com.github.calebwhiting.runelite.plugins.actionprogress.data.Smithing;

import java.util.Arrays;
import java.util.stream.Stream;

import static net.runelite.api.ItemID.*;

public enum TimedAction {
    COOKING(2, 4, Cooking.GROUP_ALL_COOKED.and(Cooking.GROUP_ALL_UNCOOKED).and(GIANT_SEAWEED, SEAWEED).build()),
    CRAFT_CAST_JEWELRY(3, new int[]{
            // Gold
            GOLD_RING, GOLD_NECKLACE, GOLD_AMULET_U, GOLD_BRACELET,
            OPAL_RING, OPAL_NECKLACE, OPAL_AMULET_U, OPAL_BRACELET,
            JADE_RING, JADE_NECKLACE, JADE_AMULET_U, JADE_BRACELET,
            TOPAZ_RING, TOPAZ_NECKLACE, TOPAZ_AMULET_U, TOPAZ_BRACELET,
            SAPPHIRE_RING, SAPPHIRE_NECKLACE, SAPPHIRE_AMULET_U, SAPPHIRE_BRACELET,
            EMERALD_RING, EMERALD_NECKLACE, EMERALD_AMULET_U, EMERALD_BRACELET,
            RUBY_RING, RUBY_NECKLACE, RUBY_AMULET_U, RUBY_BRACELET,
            DIAMOND_RING, DIAMOND_NECKLACE, DIAMOND_AMULET_U, DIAMOND_BRACELET,
            DRAGONSTONE_RING, DRAGON_NECKLACE, DRAGONSTONE_AMULET_U, DRAGONSTONE_BRACELET,
            ONYX_RING, ONYX_NECKLACE, ONYX_AMULET_U, ONYX_BRACELET,
            ZENYTE_RING, ZENYTE_NECKLACE, ZENYTE_AMULET_U, ZENYTE_BRACELET,
            // Silver
            UNSTRUNG_SYMBOL, UNSTRUNG_EMBLEM, SILVER_SICKLE, CONDUCTOR, TIARA, DEMONIC_SIGIL, SILVTHRILL_ROD,
            SILVER_BOLTS_UNF
    }),
    CRAFT_MOLTEN_GLASS(2, new int[] {MOLTEN_GLASS}),
    CRAFT_BLOW_GLASS(3, new int[] {
            BEER_GLASS, EMPTY_CANDLE_LANTERN, EMPTY_OIL_LAMP, VIAL, EMPTY_FISHBOWL, UNPOWERED_ORB, LANTERN_LENS,
            EMPTY_LIGHT_ORB
    }),
    CRAFT_STAVES(3, 2, new int[] {AIR_BATTLESTAFF, FIRE_BATTLESTAFF, WATER_BATTLESTAFF, EARTH_BATTLESTAFF}),
    CRAFT_CUT_GEMS(2, new int[]{
            UNCUT_OPAL, UNCUT_JADE, UNCUT_RED_TOPAZ, UNCUT_SAPPHIRE, UNCUT_EMERALD, UNCUT_RUBY, UNCUT_DIAMOND,
            UNCUT_DRAGONSTONE, UNCUT_ONYX, UNCUT_ZENYTE
    }),
    FLETCH_ATTACH_FEATHER(2, new int[]{HEADLESS_ARROW}),
    FLETCH_ATTACH_TIPS(2, new int[]{
            OPAL_BOLTS, PEARL_BOLTS, BRONZE_ARROW, IRON_ARROW, STEEL_ARROW, MITHRIL_ARROW, ADAMANT_ARROW, RUNE_ARROW,
            OGRE_ARROW, BROAD_ARROWS, JADE_BOLTS, TOPAZ_BOLTS, SAPPHIRE_BOLTS, EMERALD_BOLTS, RUBY_BOLTS, DIAMOND_BOLTS,
            DRAGONSTONE_BOLTS, ONYX_BOLTS, DRAGON_ARROW, AMETHYST_ARROW, BARBED_ARROW
    }),
    FLETCH_CUT_ARROW_SHAFT(3, new int[]{ARROW_SHAFT, BRUMA_KINDLING}),
    FLETCH_CUT_BOW(3, new int[]{
            LONGBOW_U, SHORTBOW_U, OAK_SHORTBOW_U, OAK_LONGBOW_U, WILLOW_LONGBOW_U, WILLOW_SHORTBOW_U,
            MAPLE_LONGBOW_U, MAPLE_SHORTBOW_U, YEW_LONGBOW_U, YEW_SHORTBOW_U, MAGIC_LONGBOW_U, MAGIC_SHORTBOW_U
    }),
    FLETCH_CUT_TIPS(5, new int[]{
            OPAL_BOLT_TIPS, PEARL_BOLT_TIPS, JADE_BOLT_TIPS, TOPAZ_BOLT_TIPS, SAPPHIRE_BOLT_TIPS, EMERALD_BOLT_TIPS,
            RUBY_BOLT_TIPS, DIAMOND_BOLT_TIPS, DRAGONSTONE_BOLT_TIPS, ONYX_BOLT_TIPS
    }),
    FLETCH_STRING_BOW(2, new int[]{
            LONGBOW, SHORTBOW, OAK_SHORTBOW, OAK_LONGBOW, WILLOW_LONGBOW, WILLOW_SHORTBOW, MAPLE_LONGBOW,
            MAPLE_SHORTBOW, YEW_LONGBOW, YEW_SHORTBOW, MAGIC_LONGBOW, MAGIC_SHORTBOW
    }),
    SMELTING(5, Stream.of(Smithing.Bar.values()).mapToInt(Smithing.Bar::getItemId).toArray()),
    SMELTING_CANNONBALLS(7, 10, new int[]{CANNONBALL}),
    MAGIC_CREATE_TABLET(2, 4, new int[]{}) /* TODO */,
    MAGIC_ENCHANT_BOLTS(1, 3, new int[]{
            PEARL_BOLTS_E, OPAL_BOLTS_E, JADE_BOLTS_E, TOPAZ_BOLTS_E, SAPPHIRE_BOLTS_E, EMERALD_BOLTS_E, RUBY_BOLTS_E,
            DIAMOND_BOLTS_E, DRAGONSTONE_BOLTS_E, ONYX_BOLTS_E, PEARL_DRAGON_BOLTS_E, OPAL_DRAGON_BOLTS_E,
            JADE_DRAGON_BOLTS_E, TOPAZ_DRAGON_BOLTS_E, SAPPHIRE_DRAGON_BOLTS_E, EMERALD_DRAGON_BOLTS_E,
            RUBY_DRAGON_BOLTS_E, DIAMOND_DRAGON_BOLTS_E, DRAGONSTONE_DRAGON_BOLTS_E, ONYX_DRAGON_BOLTS_E
    }),
    MIX_POTIONS(2, new int[]{
            ATTACK_POTION3, STRENGTH_POTION3, ANTIPOISON3, RELICYMS_BALM3, SERUM_207_3, SERUM_208_3,
            COMPOST_POTION3, RESTORE_POTION3, GUTHIX_BALANCE3, ENERGY_POTION3, DEFENCE_POTION3,
            AGILITY_POTION3, COMBAT_POTION3, PRAYER_POTION3, SUPER_ATTACK3, SUPERANTIPOISON3,
            HUNTER_POTION3, SUPER_STRENGTH3, MAGIC_ESSENCE3, WEAPON_POISON, WEAPON_POISON_1465,
            WEAPON_POISON_5937, WEAPON_POISON_5940, SUPER_RESTORE3, SANFEW_SERUM3, SUPER_DEFENCE3,
            ANTIDOTE3, ANTIDOTE3_5954, ANTIFIRE_POTION3, RANGING_POTION3, MAGIC_POTION3, SUPER_MAGIC_POTION_3,
            ZAMORAK_BREW3, BASTION_POTION3, SARADOMIN_BREW3, SUPER_COMBAT_POTION3, SUPER_ANTIFIRE_POTION3,
            ANTIVENOM3
    }),
    MIX_UNFINISHED_POTIONS(1, new int[]{
            GUAM_POTION_UNF, MARRENTILL_POTION_UNF, TARROMIN_POTION_UNF, HARRALANDER_POTION_UNF, RANARR_POTION_UNF,
            TOADFLAX_POTION_UNF, IRIT_POTION_UNF, AVANTOE_POTION_UNF, KWUARM_POTION_UNF, SNAPDRAGON_POTION_UNF,
            CADANTINE_POTION_UNF, LANTADYME_POTION_UNF, DWARF_WEED_POTION_UNF, TORSTOL_POTION_UNF,
            CADANTINE_BLOOD_POTION_UNF, ELDER_CADANTINE_POTION_UNF, REJUVENATION_POTION_UNF, GRYM_POTION_UNF,
            RELICYMS_MIX1, RELICYMS_MIX2, GUTHIX_BALANCE_UNF, GUTHIX_BALANCE_UNF_7654, GUTHIX_BALANCE_UNF_7656,
            GUTHIX_BALANCE_UNF_7658, MAGIC_ESSENCE_UNF, MAGIC_ESSENCE_MIX1, MAGIC_ESSENCE_MIX2,
            WEAPON_POISON_UNF, WEAPON_POISON_UNF_5939
    }),
    MAGIC_ENCHANT_JEWELLERY(0, 7, new int[]{}) /* TODO */,
    SMITHING(5, new int[] {}),
    COLLECT_SAND(1, 2, new int[] {});

    private final int firstActionTicks;
    private final int subsequentActionTicks;
    private final int[] products;

    TimedAction(int firstActionTicks, int subsequentActionTicks, int[] products) {
        this.firstActionTicks = firstActionTicks;
        this.subsequentActionTicks = subsequentActionTicks;
        this.products = products;
        Arrays.sort(this.products);
    }


    TimedAction(int durationInTicks, int[] products) {
        this(durationInTicks, durationInTicks, products);
    }

    public int getFirstActionTicks() {
        return firstActionTicks;
    }

    public int getSubsequentActionTicks() {
        return subsequentActionTicks;
    }

    public int[] getProduct() {
        return products;
    }

}
